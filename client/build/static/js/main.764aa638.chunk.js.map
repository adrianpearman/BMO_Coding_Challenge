{"version":3,"sources":["redux/actions/types.js","redux/reducers/restaurantReducer.js","redux/reducers/uiReducer.js","redux/reducers/index.js","redux/store/index.js","utils/Root.js","utils/Capitalize.js","utils/RenderPrice.js","components/DisplayPrice.js","components/DisplayResultsItem.js","redux/actions/restaurantActions.js","redux/actions/uiActions.js","redux/actions/index.js","components/DisplayResultsItemsControl.js","components/DisplayResults.js","components/FormInput.js","components/App.js","serviceWorker.js","index.js"],"names":["types","FETCH_RESTAURANTS_SUCCESS","FETCH_RESTAURANTS_ERROR","UPDATE_CITY","UPDATE_PRICE","UPDATE_RESTAURANT_NAME","UPDATE_ADDRESS","UPDATE_STATE","UPDATE_ZIPCODE","UPDATE_COUNTRY","UPDATE_PAGE","UPDATE_PER_PAGE","DISPLAY_REFINE_SEARCH","initialState","displayResultsNumberBeginning","displayResultsNumberEnding","fetchedCity","fetchRestaurantErrorMsg","fetchRestaurantSuccess","numberOfRestaurants","restaurantList","address","city","country","page","perPage","price","restaurantName","showRefineSearch","state","zipCode","combineReducers","restaurantState","action","type","ACTIONS","payload","current_page","per_page","restaurants","total_entries","restaurantListCount","length","message","uiState","composeEnhancers","composeWithDevTools","middlewares","thunk","store","createStore","reducers","applyMiddleware","Root","children","capitalize","str","capitalizeArr","string","toLowerCase","split","word","push","toUpperCase","slice","join","trim","RenderPrice","DisplayPrice","className","DisplayResultsItem","data","id","name","alt","meta","src","image_url","postal_code","phone","href","reserve_url","target","restaurantActions","fetchRestaurantList","e","dispatch","getState","a","preventDefault","url","axios","get","response","fetchNextPage","maxPage","Math","ceil","newPage","fetchPreviousPage","uiActions","displayRefineSearch","updateCity","event","value","updatePrice","updateRestaurantName","updateAddress","updateState","updateZipCode","updateCountry","updatePage","updatePerPage","restauarantActions","mapDispatchToProps","actions","connect","displayControls","disabled","onClick","displayResultsInfo","displayResultsError","displayResults","map","restaurant","index","key","displayShowMenuHandler","numberOfPages","availablePages","onSubmit","htmlFor","onChange","placeholder","maxLength","defaultValue","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.764aa638.chunk.js","sourcesContent":["const types = {\n  //RESTAURANT ACTIONS\n  FETCH_RESTAURANTS_SUCCESS: \"FETCH_RESTAURANTS_SUCCESS\",\n  FETCH_RESTAURANTS_ERROR: \"FETCH_RESTAURANTS_ERROR\",\n  //UI ACTIONS\n  UPDATE_CITY: \"UPDATE_CITY\",\n  UPDATE_PRICE: \"UPDATE_PRICE\",\n  UPDATE_RESTAURANT_NAME: \"UPDATE_RESTAURANT_NAME\",\n  UPDATE_ADDRESS: \"UPDATE_ADDRESS\",\n  UPDATE_STATE: \"UPDATE_STATE\",\n  UPDATE_ZIPCODE: \"UPDATE_ZIPCODE\",\n  UPDATE_COUNTRY: \"UPDATE_COUNTRY\",\n  UPDATE_PAGE: \"UPDATE_PAGE\",\n  UPDATE_PER_PAGE: \"UPDATE_PER_PAGE\",\n  DISPLAY_REFINE_SEARCH: \"DISPLAY_REFINE_SEARCH\",\n};\n\nexport default types;\n","import ACTIONS from \"../actions/types\";\n\nconst initialState = {\n  displayResultsNumberBeginning: 0,\n  displayResultsNumberEnding: 0,\n  fetchedCity: null,\n  fetchRestaurantErrorMsg: null,\n  fetchRestaurantSuccess: null,\n  numberOfRestaurants: 0,\n  restaurantList: [],\n};\n\nexport const restaurantReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case ACTIONS.FETCH_RESTAURANTS_SUCCESS: {\n      const {\n        city,\n        current_page,\n        per_page,\n        restaurants,\n        total_entries,\n      } = action.payload;\n\n      const restaurantListCount = restaurants.length;\n      const displayResultsNumberBeginning =\n        current_page * per_page - per_page + 1;\n      const displayResultsNumberEnding =\n        current_page * per_page + restaurantListCount - per_page;\n\n      return {\n        ...state,\n        displayResultsNumberBeginning,\n        displayResultsNumberEnding,\n        fetchedCity: city,\n        fetchRestaurantErrorMsg: null,\n        fetchRestaurantSuccess: true,\n        restaurantList: restaurants,\n        numberOfRestaurants: total_entries,\n      };\n    }\n    case ACTIONS.FETCH_RESTAURANTS_ERROR: {\n      return {\n        ...state,\n        fetchRestaurantErrorMsg: action.payload.message,\n        fetchRestaurantSuccess: false,\n      };\n    }\n    default: {\n      return state;\n    }\n  }\n};\n","import ACTIONS from \"../actions/types\";\n\nconst initialState = {\n  address: \"\",\n  city: \"\",\n  country: \"\",\n  page: 1, // value between 1 and 4\n  perPage: 25, // value can be either  [5, 10, 15, 25, 50, 100]\n  price: 1,\n  restaurantName: \"\",\n  showRefineSearch: false,\n  state: \"\",\n  zipCode: \"\",\n};\n\nexport const uiReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case ACTIONS.DISPLAY_REFINE_SEARCH: {\n      return {\n        ...state,\n        showRefineSearch: action.payload,\n      };\n    }\n    case ACTIONS.UPDATE_CITY: {\n      return {\n        ...state,\n        city: action.payload,\n      };\n    }\n    case ACTIONS.UPDATE_PRICE: {\n      return {\n        ...state,\n        price: action.payload,\n      };\n    }\n    case ACTIONS.UPDATE_RESTAURANT_NAME: {\n      return {\n        ...state,\n        restaurantName: action.payload,\n      };\n    }\n    case ACTIONS.UPDATE_ADDRESS: {\n      return {\n        ...state,\n        address: action.payload,\n      };\n    }\n    case ACTIONS.UPDATE_STATE: {\n      return {\n        ...state,\n        state: action.payload,\n      };\n    }\n    case ACTIONS.UPDATE_ZIPCODE: {\n      return {\n        ...state,\n        zipCode: action.payload,\n      };\n    }\n    case ACTIONS.UPDATE_COUNTRY: {\n      return {\n        ...state,\n        country: action.payload,\n      };\n    }\n    case ACTIONS.UPDATE_PAGE: {\n      return {\n        ...state,\n        page: action.payload,\n      };\n    }\n    case ACTIONS.UPDATE_PER_PAGE: {\n      return {\n        ...state,\n        perPage: action.payload,\n      };\n    }\n    default: {\n      return state;\n    }\n  }\n};\n","// NPM Modules\nimport { combineReducers } from \"redux\";\n// Reducers\nimport { restaurantReducer } from \"./restaurantReducer\";\nimport { uiReducer } from \"./uiReducer\";\n\nexport default combineReducers({\n  restaurantState: restaurantReducer,\n  uiState: uiReducer,\n});\n","// NPM Modules\nimport { createStore, applyMiddleware } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport reducers from \"../reducers\";\n// Redux Store\nconst composeEnhancers = composeWithDevTools({});\nconst middlewares = [thunk];\nconst store = createStore(\n  reducers,\n  composeEnhancers(applyMiddleware(...middlewares))\n);\n\nexport default store;\n","import React from \"react\";\nimport { Provider } from \"react-redux\";\nimport store from \"../redux/store\";\n\nconst Root = ({ children }) => {\n  return <Provider store={store}>{children}</Provider>;\n};\n\nexport default Root;\n","const capitalize = (str) => {\n  let capitalizeArr = [];\n  if (str === \"\") {\n    return \"\";\n  } else {\n    let string = str.toLowerCase();\n    for (const word of string.split(\" \")) {\n      capitalizeArr.push(word[0].toUpperCase() + word.slice(1));\n    }\n    return capitalizeArr.join(\" \").trim();\n  }\n};\n\nexport default capitalize;\n","const RenderPrice = (price) => {\n  switch (price) {\n    case 1:\n      return \"$\";\n    case 2:\n      return \"$$\";\n    case 3:\n      return \"$$$\";\n    case 4:\n      return \"$$$$\";\n    default:\n      break;\n  }\n};\n\nexport default RenderPrice;\n","// NPM Modules\nimport React from \"react\";\n// Utilities\nimport RenderPrice from \"../utils/RenderPrice\";\n\nconst DisplayPrice = ({ price }) => {\n  return (\n    <p className=\"display-result-item_text\">\n      Price Rating:\n      {RenderPrice(price)}\n    </p>\n  );\n};\n\nexport default DisplayPrice;\n","// NPM Modules\nimport React from \"react\";\n// Components\nimport DisplayPrice from \"./DisplayPrice\";\n\nconst DisplayResultsItem = ({ data }) => {\n  return (\n    <div className=\"display-result-item\" id={data.id}>\n      <h3 className=\"display-result-item_header\">{data.name}</h3>\n\n      <div className=\"display-result-item_body\">\n        <div className=\"display-result-item_container\">\n          <div className=\"display-result-item_container-img\">\n            <img\n              alt={`Showcasing the decor and apperance of ${data.name}`}\n              className=\"display-result-item_img\"\n              meta={data.name}\n              src={data.image_url}\n            />\n          </div>\n          <div className=\"display-result-item_container-content\">\n            <h4 className=\"display-result-item_title\">Restaurant Details</h4>\n            <p className=\"display-result-item_text\">{data.address}</p>\n            <p className=\"display-result-item_text\">\n              {data.city}, {data.state}, {data.postal_code}\n            </p>\n            <DisplayPrice price={data.price} />\n            <h5 className=\"display-result-item_title\">Contact Information</h5>\n            <p className=\"display-result-item_text\">{data.phone}</p>\n            <a\n              className=\"display-result-item_text reserve_link\"\n              href={data.reserve_url}\n              target=\"blank\"\n            >\n              Reservation Link\n            </a>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\nexport default DisplayResultsItem;\n","import ACTIONS from \"./types\";\nimport axios from \"axios\";\n\nconst restaurantActions = {\n  fetchRestaurantList: (e) => async (dispatch, getState) => {\n    e.preventDefault();\n    const {\n      city,\n      price,\n      restaurantName,\n      address,\n      state,\n      zipCode,\n      country,\n      perPage,\n    } = getState().uiState;\n\n    const page = 1;\n\n    const url = `https://opentable.herokuapp.com/api/restaurants?city=${city}&price=${price}&name=${restaurantName}&address=${address}&state=${state}&zip=${zipCode}&country=${country}&page=${page}&per_page=${perPage}`;\n\n    try {\n      let response = await axios.get(url);\n      dispatch({\n        type: ACTIONS.UPDATE_PAGE,\n        payload: 1,\n      });\n      dispatch({\n        type: ACTIONS.FETCH_RESTAURANTS_SUCCESS,\n        payload: { ...response.data, city },\n      });\n    } catch (err) {\n      dispatch({\n        type: ACTIONS.FETCH_RESTAURANTS_ERROR,\n        payload: err,\n      });\n    }\n  },\n  fetchNextPage: (e) => async (dispatch, getState) => {\n    e.preventDefault();\n    const {\n      city,\n      price,\n      restaurantName,\n      address,\n      state,\n      zipCode,\n      country,\n      page,\n      perPage,\n    } = getState().uiState;\n\n    const { numberOfRestaurants } = getState().restaurantState;\n\n    // Find max number of pages\n    const maxPage = Math.ceil(numberOfRestaurants / perPage);\n    // Increment page if not at page limit\n    let newPage = page < maxPage ? page + 1 : page;\n\n    const url = `https://opentable.herokuapp.com/api/restaurants?city=${city}&price=${price}&name=${restaurantName}&address=${address}&state=${state}&zip=${zipCode}&country=${country}&page=${newPage}&per_page=${perPage}`;\n\n    try {\n      let response = await axios.get(url);\n      dispatch({\n        type: ACTIONS.UPDATE_PAGE,\n        payload: newPage,\n      });\n      dispatch({\n        type: ACTIONS.FETCH_RESTAURANTS_SUCCESS,\n        payload: { ...response.data, city },\n      });\n    } catch (err) {\n      dispatch({\n        type: ACTIONS.FETCH_RESTAURANTS_ERROR,\n        payload: err,\n      });\n    }\n  },\n  fetchPreviousPage: (e) => async (dispatch, getState) => {\n    e.preventDefault();\n    const {\n      city,\n      price,\n      restaurantName,\n      address,\n      state,\n      zipCode,\n      country,\n      page,\n      perPage,\n    } = getState().uiState;\n\n    // Decrement page if not at page limit\n    let newPage = page > 1 ? page - 1 : page;\n\n    const url = `https://opentable.herokuapp.com/api/restaurants?city=${city}&price=${price}&name=${restaurantName}&address=${address}&state=${state}&zip=${zipCode}&country=${country}&page=${newPage}&per_page=${perPage}`;\n\n    try {\n      let response = await axios.get(url);\n      dispatch({\n        type: ACTIONS.UPDATE_PAGE,\n        payload: newPage,\n      });\n      dispatch({\n        type: ACTIONS.FETCH_RESTAURANTS_SUCCESS,\n        payload: { ...response.data, city },\n      });\n    } catch (err) {\n      dispatch({\n        type: ACTIONS.FETCH_RESTAURANTS_ERROR,\n        payload: err,\n      });\n    }\n  },\n};\n\nexport default restaurantActions;\n","import ACTIONS from \"./types\";\n\nconst uiActions = {\n  displayRefineSearch: (e) => async (dispatch, getState) => {\n    e.preventDefault();\n    const { showRefineSearch } = getState().uiState;\n    dispatch({\n      type: ACTIONS.DISPLAY_REFINE_SEARCH,\n      payload: !showRefineSearch,\n    });\n  },\n  updateCity: (e) => {\n    let event = e.target.value;\n    return {\n      type: ACTIONS.UPDATE_CITY,\n      payload: event.trim(),\n    };\n  },\n  updatePrice: (e) => {\n    let event = e.target.value;\n    return {\n      type: ACTIONS.UPDATE_PRICE,\n      payload: event,\n    };\n  },\n  updateRestaurantName: (e) => {\n    let event = e.target.value;\n    return {\n      type: ACTIONS.UPDATE_RESTAURANT_NAME,\n      payload: event.trim(),\n    };\n  },\n  updateAddress: (e) => {\n    let event = e.target.value;\n    return {\n      type: ACTIONS.UPDATE_ADDRESS,\n      payload: event.trim(),\n    };\n  },\n  updateState: (e) => {\n    let event = e.target.value;\n    return {\n      type: ACTIONS.UPDATE_STATE,\n      payload: event.trim(),\n    };\n  },\n  updateZipCode: (e) => {\n    let event = e.target.value;\n    return {\n      type: ACTIONS.UPDATE_ZIPCODE,\n      payload: event.trim(),\n    };\n  },\n  updateCountry: (e) => {\n    let event = e.target.value;\n    return {\n      type: ACTIONS.UPDATE_COUNTRY,\n      payload: event.trim(),\n    };\n  },\n  updatePage: (e) => {\n    let event = e.target.value;\n    return {\n      type: ACTIONS.UPDATE_PAGE,\n      payload: event,\n    };\n  },\n  updatePerPage: (e) => {\n    let event = e.target.value;\n    return {\n      type: ACTIONS.UPDATE_PER_PAGE,\n      payload: event,\n    };\n  },\n};\n\nexport default uiActions;\n","import restauarantActions from \"./restaurantActions\";\nimport uiActions from \"./uiActions\";\n\nexport default {\n  ...restauarantActions,\n  ...uiActions,\n};\n","// NPM Modules\nimport React from \"react\";\nimport { connect } from \"react-redux\";\n// Actions\nimport actions from \"../redux/actions\";\n\nconst DisplayResultsItemsControl = ({\n  fetchNextPage,\n  fetchPreviousPage,\n  restaurantState,\n  uiState,\n}) => {\n  const {\n    fetchRestaurantSuccess,\n    numberOfRestaurants,\n    restaurantList,\n  } = restaurantState;\n  const displayControls =\n    numberOfRestaurants === restaurantList.length ? null : (\n      <div className=\"display-results-item-container\">\n        <div className=\"display-results-item-container-control\">\n          <button\n            className=\"previous-button button button-primary\"\n            disabled={uiState.page === 1 ? true : false}\n            onClick={(e) => {\n              fetchPreviousPage(e);\n            }}\n          >\n            Previous Page\n          </button>\n\n          <p className=\"text-center current-page\">\n            Current Page: {uiState.page}\n          </p>\n          <button\n            className=\"next-button button button-primary\"\n            disabled={\n              uiState.page ===\n              Math.ceil(restaurantState.numberOfRestaurants / uiState.perPage)\n                ? true\n                : false\n            }\n            onClick={(e) => fetchNextPage(e)}\n          >\n            Next Page\n          </button>\n        </div>\n      </div>\n    );\n\n  return <>{fetchRestaurantSuccess === true ? displayControls : null}</>;\n};\n\nconst mapStateToProps = ({ restaurantState, uiState }) => {\n  return {\n    restaurantState,\n    uiState,\n  };\n};\n\nconst mapDispatchToProps = {\n  fetchNextPage: actions.fetchNextPage,\n  fetchPreviousPage: actions.fetchPreviousPage,\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(DisplayResultsItemsControl);\n","// NPM Modules\nimport React from \"react\";\nimport { connect } from \"react-redux\";\n// Utilities\nimport capitalize from \"../utils/Capitalize\";\n// Components\nimport DisplayResultsItem from \"./DisplayResultsItem\";\nimport DisplayResultsItemsControl from \"./DisplayResultsItemsControl\";\n\nconst DisplayResults = ({ restaurantState }) => {\n  const {\n    displayResultsNumberBeginning,\n    displayResultsNumberEnding,\n    fetchedCity,\n    fetchRestaurantSuccess,\n    numberOfRestaurants,\n  } = restaurantState;\n\n  let displayResultsInfo =\n    fetchRestaurantSuccess === true ? (\n      <div className=\"display-results-container\">\n        <p className=\"display-results-container-text text-center\">\n          Displaying results for: {capitalize(fetchedCity)}\n        </p>\n        <p className=\"display-results-container-text text-center\">\n          Total Results: {numberOfRestaurants}\n        </p>\n        {numberOfRestaurants > 0 ? (\n          <p className=\"display-results-container-text text-center\">\n            Displaying Results {displayResultsNumberBeginning} of{\" \"}\n            {displayResultsNumberEnding}\n          </p>\n        ) : null}\n      </div>\n    ) : null;\n\n  let displayResultsError =\n    fetchRestaurantSuccess === false ? (\n      <p className=\"display-results-error-message\">Error Retriving Results</p>\n    ) : null;\n\n  let displayResults =\n    fetchRestaurantSuccess === true ? (\n      <div className=\"display-results-content\">\n        {restaurantState.restaurantList.map((restaurant, index) => {\n          return <DisplayResultsItem key={index} data={restaurant} />;\n        })}\n      </div>\n    ) : null;\n\n  return (\n    <div className=\"display-results\">\n      <DisplayResultsItemsControl />\n      {displayResultsInfo}\n      {displayResultsError}\n      {displayResults}\n    </div>\n  );\n};\n\nconst mapStateToProps = ({ restaurantState }) => {\n  return {\n    restaurantState,\n  };\n};\n\nexport default connect(mapStateToProps)(DisplayResults);\n","// NPM Modules\nimport React from \"react\";\nimport { connect } from \"react-redux\";\n// Actions\nimport actions from \"../redux/actions\";\n\nconst FormInput = ({\n  displayShowMenuHandler,\n  fetchRestaurantList,\n  restaurantState,\n  uiState,\n  updateCity,\n  updatePrice,\n  updateRestaurantName,\n  updateAddress,\n  updateState,\n  updateZipCode,\n  updateCountry,\n  updatePage,\n  updatePerPage,\n}) => {\n  const { numberOfRestaurants } = restaurantState;\n  const { perPage, showRefineSearch } = uiState;\n  const numberOfPages = Math.ceil(numberOfRestaurants / perPage);\n  let availablePages = [];\n  for (let index = 0; index < numberOfPages; index++) {\n    availablePages.push(index + 1);\n  }\n\n  return (\n    <form className=\"form-container\" onSubmit={(e) => fetchRestaurantList(e)}>\n      <div className=\"form-container_search\">\n        <div className=\"form-group column-1\">\n          <label className=\"form-group-label\" htmlFor=\"updateCity\">\n            Select City\n          </label>\n          <input\n            className=\"form-group-input\"\n            id=\"updateCity\"\n            onChange={(e) => updateCity(e)}\n            placeholder=\"Please Select a City\"\n          />\n        </div>\n      </div>\n\n      <div className=\"form-container_refine-search\">\n        <h2 className=\"text-center\">Refine Search:</h2>\n        <p\n          className=\"refine-search text-center\"\n          onClick={(e) => {\n            displayShowMenuHandler(e);\n          }}\n        >\n          {showRefineSearch ? \"Close Menu \" : \"Show Menu\"}\n        </p>\n        {showRefineSearch ? (\n          <div className=\"form-container_refine-search-menu\">\n            <div className=\"form-container-row my-1\">\n              <div className=\"form-group column-2 \">\n                <label\n                  className=\"form-group-label\"\n                  htmlFor=\"updateRestaurantName\"\n                >\n                  Search by Restaurant Name\n                </label>\n                <input\n                  className=\"form-group-input\"\n                  id=\"updateRestaurantName\"\n                  onChange={(e) => updateRestaurantName(e)}\n                  placeholder=\"Please Enter an Restaurant Name\"\n                />\n              </div>\n\n              <div className=\"form-group column-2\">\n                <label className=\"form-group-label\" htmlFor=\"updateAddress\">\n                  Search by Restaurant Name\n                </label>\n                <input\n                  className=\"form-group-input\"\n                  id=\"updateAddress\"\n                  onChange={(e) => updateAddress(e)}\n                  placeholder=\"Please Enter an Address\"\n                />\n              </div>\n            </div>\n            <div className=\"form-container-row my-1\">\n              <div className=\"form-group column-2\">\n                <label className=\"form-group-label\" htmlFor=\"updateState\">\n                  Search by State\n                </label>\n                <input\n                  className=\"form-group-input\"\n                  id=\"updateState\"\n                  onChange={(e) => updateState(e)}\n                  placeholder=\"Please Enter a State\"\n                />\n              </div>\n\n              <div className=\"form-group column-2\">\n                <label className=\"form-group-label\" htmlFor=\"updateZipCode\">\n                  Zip Code\n                </label>\n                <input\n                  className=\"form-group-input\"\n                  id=\"updateZipCode\"\n                  maxLength={2}\n                  onChange={(e) => updateZipCode(e)}\n                  placeholder=\"Input a Zip Code\"\n                />\n              </div>\n            </div>\n            <div className=\"form-container-row my-1\">\n              <div className=\"form-group column-2\">\n                <label className=\"form-group-label\" htmlFor=\"updateCountry\">\n                  Country\n                </label>\n                <input\n                  className=\"form-group-input\"\n                  id=\"updateCountry\"\n                  maxLength={2}\n                  onChange={(e) => updateCountry(e)}\n                  placeholder=\"Enter a Country\"\n                />\n              </div>\n\n              <div className=\"form-group column-2\">\n                <label className=\"form-group-label\" htmlFor=\"updatePrice\">\n                  Select a Price\n                </label>\n                <select\n                  className=\"form-group-select\"\n                  defaultValue={\"default\"}\n                  id=\"updatePrice\"\n                  onChange={(e) => updatePrice(e)}\n                >\n                  <option value=\"default\" disabled>\n                    Please Select a Price\n                  </option>\n                  <option value=\"1\">1 - $</option>\n                  <option value=\"2\">2 - $$</option>\n                  <option value=\"3\">3 - $$$</option>\n                  <option value=\"4\">4 - $$$$</option>\n                </select>\n              </div>\n            </div>\n            <div className=\"form-container-row my-1\">\n              <div className=\"form-group column-2\">\n                <label className=\"form-group-label\" htmlFor=\"updatePerPage\">\n                  Select Result Page\n                </label>\n                <select\n                  className=\"form-group-select\"\n                  defaultValue={\"default\"}\n                  id=\"updatePerPage\"\n                  onChange={(e) => updatePage(e)}\n                >\n                  <option value=\"default\">---</option>\n                  {availablePages.map((index, key) => {\n                    return (\n                      <option key={key} value={index}>\n                        {index}\n                      </option>\n                    );\n                  })}\n                </select>\n              </div>\n              <div className=\"form-group column-2\">\n                <label className=\"form-group-label\" htmlFor=\"updatePerPage\">\n                  Results Per Page\n                </label>\n                <select\n                  className=\"form-group-select\"\n                  defaultValue={\"default\"}\n                  id=\"updatePerPage\"\n                  onChange={(e) => updatePerPage(e)}\n                >\n                  <option value=\"default\" disabled>\n                    Please Select a Price\n                  </option>\n                  <option value=\"5\">5</option>\n                  <option value=\"10\">10</option>\n                  <option value=\"15\">15</option>\n                  <option value=\"25\">25</option>\n                  <option value=\"50\">50</option>\n                  <option value=\"100\">100</option>\n                </select>\n              </div>\n            </div>\n          </div>\n        ) : null}\n\n        <div className=\"form-container-row my-2\">\n          <span className=\"column-1\">\n            <button\n              className=\"button button-primary full-width\"\n              onClick={(e) => fetchRestaurantList(e)}\n            >\n              Search\n            </button>\n          </span>\n        </div>\n      </div>\n    </form>\n  );\n};\n\nconst mapStateToProps = ({ restaurantState, uiState }) => {\n  return {\n    restaurantState,\n    uiState,\n  };\n};\n\nconst mapDispatchToProps = {\n  displayShowMenuHandler: actions.displayRefineSearch,\n  fetchRestaurantList: actions.fetchRestaurantList,\n  updateCity: actions.updateCity,\n  updatePrice: actions.updatePrice,\n  updateRestaurantName: actions.updateRestaurantName,\n  updateAddress: actions.updateAddress,\n  updateState: actions.updateState,\n  updateZipCode: actions.updateZipCode,\n  updateCountry: actions.updateCountry,\n  updatePage: actions.updatePage,\n  updatePerPage: actions.updatePerPage,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(FormInput);\n","// NPM Modules\nimport React from \"react\";\n// Components\nimport Root from \"../utils/Root\";\nimport DisplayResults from \"./DisplayResults\";\nimport FormInput from \"./FormInput\";\n\nconst App = () => {\n  return (\n    <Root>\n      <div className=\"container\">\n        <h1 className=\"text-center\">Restaurant Search</h1>\n        <FormInput />\n        <DisplayResults />\n      </div>\n    </Root>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","//NPM Modules\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\n// COMPONENTS\nimport \"./assets/styles/styles.scss\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}